###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Dict, List, Optional, TypeVar, Union, TypedDict, Type, Literal, cast
from typing_extensions import NotRequired
import pprint

import baml_py
from pydantic import BaseModel, ValidationError, create_model

from . import partial_types, types
from .types import Checked, Check
from .type_builder import TypeBuilder
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME


OutputType = TypeVar('OutputType')


# Define the TypedDict with optional parameters having default values
class BamlCallOptions(TypedDict, total=False):
    tb: NotRequired[TypeBuilder]
    client_registry: NotRequired[baml_py.baml_py.ClientRegistry]

class BamlAsyncClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager
    __stream_client: "BamlStreamClient"

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__stream_client = BamlStreamClient(self.__runtime, self.__ctx_manager)

    @property
    def stream(self):
      return self.__stream_client


    
    async def ExtractResume(
        self,
        resume: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Resume:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = await self.__runtime.call_function(
        "ExtractResume",
        {
          "resume": resume,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )
      return cast(types.Resume, raw.cast_to(types, types))
    
    async def RecursiveLookup(
        self,
        question: str,current_endpoint: str,api_content: str,
        baml_options: BamlCallOptions = {},
    ) -> Union[types.ArchivistFollowups, types.ArchivistAnswer]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = await self.__runtime.call_function(
        "RecursiveLookup",
        {
          "question": question,"current_endpoint": current_endpoint,"api_content": api_content,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )
      return cast(Union[types.ArchivistFollowups, types.ArchivistAnswer], raw.cast_to(types, types))
    
    async def VoloChat(
        self,
        query: str,history: List[types.ChatHistoryItem],
        baml_options: BamlCallOptions = {},
    ) -> Union[types.VoloResponse, types.ContactArchivist]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = await self.__runtime.call_function(
        "VoloChat",
        {
          "query": query,"history": history,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )
      return cast(Union[types.VoloResponse, types.ContactArchivist], raw.cast_to(types, types))
    
    async def VoloChatWithContext(
        self,
        query: str,history: List[types.ChatHistoryItem],archivist_context: str,
        baml_options: BamlCallOptions = {},
    ) -> str:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = await self.__runtime.call_function(
        "VoloChatWithContext",
        {
          "query": query,"history": history,"archivist_context": archivist_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )
      return cast(str, raw.cast_to(types, types))
    


class BamlStreamClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def ExtractResume(
        self,
        resume: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Resume, types.Resume]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.stream_function(
        "ExtractResume",
        {
          "resume": resume,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return baml_py.BamlStream[partial_types.Resume, types.Resume](
        raw,
        lambda x: cast(partial_types.Resume, x.cast_to(types, partial_types)),
        lambda x: cast(types.Resume, x.cast_to(types, types)),
        self.__ctx_manager.get(),
      )
    
    def RecursiveLookup(
        self,
        question: str,current_endpoint: str,api_content: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[Optional[Union[partial_types.ArchivistFollowups, partial_types.ArchivistAnswer]], Union[types.ArchivistFollowups, types.ArchivistAnswer]]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.stream_function(
        "RecursiveLookup",
        {
          "question": question,
          "current_endpoint": current_endpoint,
          "api_content": api_content,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return baml_py.BamlStream[Optional[Union[partial_types.ArchivistFollowups, partial_types.ArchivistAnswer]], Union[types.ArchivistFollowups, types.ArchivistAnswer]](
        raw,
        lambda x: cast(Optional[Union[partial_types.ArchivistFollowups, partial_types.ArchivistAnswer]], x.cast_to(types, partial_types)),
        lambda x: cast(Union[types.ArchivistFollowups, types.ArchivistAnswer], x.cast_to(types, types)),
        self.__ctx_manager.get(),
      )
    
    def VoloChat(
        self,
        query: str,history: List[types.ChatHistoryItem],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[Optional[Union[partial_types.VoloResponse, partial_types.ContactArchivist]], Union[types.VoloResponse, types.ContactArchivist]]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.stream_function(
        "VoloChat",
        {
          "query": query,
          "history": history,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return baml_py.BamlStream[Optional[Union[partial_types.VoloResponse, partial_types.ContactArchivist]], Union[types.VoloResponse, types.ContactArchivist]](
        raw,
        lambda x: cast(Optional[Union[partial_types.VoloResponse, partial_types.ContactArchivist]], x.cast_to(types, partial_types)),
        lambda x: cast(Union[types.VoloResponse, types.ContactArchivist], x.cast_to(types, types)),
        self.__ctx_manager.get(),
      )
    
    def VoloChatWithContext(
        self,
        query: str,history: List[types.ChatHistoryItem],archivist_context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[Optional[str], str]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.stream_function(
        "VoloChatWithContext",
        {
          "query": query,
          "history": history,
          "archivist_context": archivist_context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return baml_py.BamlStream[Optional[str], str](
        raw,
        lambda x: cast(Optional[str], x.cast_to(types, partial_types)),
        lambda x: cast(str, x.cast_to(types, types)),
        self.__ctx_manager.get(),
      )
    

b = BamlAsyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)

__all__ = ["b"]